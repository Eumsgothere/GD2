using UnityEngine;
using System.Collections.Generic;   
using static UnityEngine.GraphicsBuffer;

public class GameController : MonoBehaviour
{

    float ScreenWidthHalf = Screen.width / 2;
    float ScreenHeightHalf = Screen.height / 2;

    float targetCount = 1;       
    float targetLife = 1;        
    string playerName = "";      

    float red = 255;
    float green = 255;
    float blue = 255;
    Color targetColor = Color.white; 

    bool isConfirmed = false;     
    bool isReset = false;         
    bool isOk = false;           

    bool targetsSpawned = false;  
    bool finalPlatformReached = false; 
    bool allTargetsDestroyed = false;  

    List<GameObject> targets = new List<GameObject>(); 
    [SerializeField] Player player;
    [SerializeField] Target target;
    [SerializeField] GameObject targetPrefab;          
    GameObject[] targetLoc;                            
    private string ammoCount;                         

    public bool IsOk { get => isOk; set => isOk = value; }

    void Start()
    {
        targetLoc = GameObject.FindGameObjectsWithTag("LocationTarget");
        ammoCount = $"Ammo: {player.GetAmmo()}";
    }

    private void OnGUI()
    {
        if (!isConfirmed && !IsOk) 
        {
            GUI.Box(
                new Rect(ScreenWidthHalf / 2, ScreenHeightHalf / 2 - 30, ScreenWidthHalf, ScreenHeightHalf + 60),
                "Game Controller GUI"
            );


            GUI.Label(new Rect(ScreenWidthHalf / 2 + 20, ScreenHeightHalf / 2 + 8, 200, 30),
                $"Target Count: {targetCount}");

            targetCount = GUI.HorizontalSlider(new Rect(ScreenWidthHalf / 2 + 120, ScreenHeightHalf / 2 + 10, 200, 30),
                targetCount, 1, 4);
            targetCount = Mathf.Round(targetCount); 


            GUI.Label(new Rect(ScreenWidthHalf / 2 + 20, ScreenHeightHalf / 2 + 40, 200, 30),
                $"Target Life: {targetLife}");
  
            targetLife = GUI.HorizontalSlider(new Rect(ScreenWidthHalf / 2 + 120, ScreenHeightHalf / 2 + 42, 200, 30),
                targetLife, 1, 3);
            targetLife = Mathf.Round(targetLife);

            GUI.Label(new Rect(ScreenWidthHalf / 2 + 20, ScreenHeightHalf / 2 + 72, 200, 30), "Player Name:");
            playerName = GUI.TextField(new Rect(ScreenWidthHalf / 2 + 120, ScreenHeightHalf / 2 + 72, 200, 30),
                playerName);

            GUI.Label(new Rect(ScreenWidthHalf / 2 + 20, ScreenHeightHalf / 2 + 104, 300, 30), "Target Color");
            GUI.Label(new Rect(ScreenWidthHalf / 2 + 110, ScreenHeightHalf / 2 + 104, 50, 30), $"R:{red}");
            GUI.Label(new Rect(ScreenWidthHalf / 2 + 170, ScreenHeightHalf / 2 + 104, 50, 30), $"G:{green}");
            GUI.Label(new Rect(ScreenWidthHalf / 2 + 230, ScreenHeightHalf / 2 + 104, 50, 30), $"B:{blue}");


            red = GUI.VerticalSlider(new Rect(ScreenWidthHalf / 2 + 120, ScreenHeightHalf / 2 + 130, 20, 80), red, 255, 0);
            green = GUI.VerticalSlider(new Rect(ScreenWidthHalf / 2 + 180, ScreenHeightHalf / 2 + 130, 20, 80), green, 255, 0);
            blue = GUI.VerticalSlider(new Rect(ScreenWidthHalf / 2 + 240, ScreenHeightHalf / 2 + 130, 20, 80), blue, 255, 0);
            red = Mathf.Round(red);
            green = Mathf.Round(green);
            blue = Mathf.Round(blue);


            isConfirmed = GUI.Button(new Rect(ScreenWidthHalf / 2 + 280, ScreenHeightHalf / 2 + 120, 100, 30), "Confirm");
            isReset = GUI.Button(new Rect(ScreenWidthHalf / 2 + 280, ScreenHeightHalf / 2 + 165, 100, 30), "Reset");
        }


        if (isConfirmed && !string.IsNullOrEmpty(playerName) && !IsOk) 
        {

            GUI.Box(new Rect(ScreenWidthHalf / 2, ScreenHeightHalf / 2 - 30, ScreenWidthHalf, ScreenHeightHalf + 30), "Confirm Details");
            GUI.Label(new Rect(ScreenWidthHalf / 2 + 20, ScreenHeightHalf / 2 + 8, 300, 30), $"Player Name: {playerName}");
            GUI.Label(new Rect(ScreenWidthHalf / 2 + 20, ScreenHeightHalf / 2 + 40, 300, 30), $"Target Count: {targetCount}");
            GUI.Label(new Rect(ScreenWidthHalf / 2 + 20, ScreenHeightHalf / 2 + 72, 300, 30), $"Target Life: {targetLife}");


            IsOk = GUI.Button(new Rect(ScreenWidthHalf / 2 + 65, ScreenHeightHalf / 2 + 140, 100, 30), "OK");
            if (GUI.Button(new Rect(ScreenWidthHalf / 2 + 220, ScreenHeightHalf / 2 + 140, 100, 30), "Back"))
                isConfirmed = false;
        }
        else
        {
            isConfirmed = false;
        }


        if (isReset)
        {
            targetCount = 1;
            targetLife = 1;
            playerName = "";
            isReset = false; 
        }


        if (IsOk)
        {

            targetColor = new Color(red / 255f, green / 255f, blue / 255f);

            target.SetTargetColor(targetColor);


            if (!targetsSpawned)
                SpawnTargets((int)targetCount);
            GUI.Label(new Rect(50, 20, 200, 30), playerName);
            ammoCount = $"Ammo: {player.GetAmmo()}";
            GUI.Label(new Rect(50, 50, 200, 30), ammoCount);
        }


        if (finalPlatformReached)
            GUI.Label(new Rect(ScreenWidthHalf, ScreenHeightHalf, 600, 80), "You Win Lets Go!");
    }


    void SpawnTargets(int count)
    {
        Debug.Log($"Spawning {count} targets...");
        for (int i = 0; i < count; i++)
        {

            GameObject pos = targetLoc[i];
            GameObject targetObj = Instantiate(targetPrefab, pos.transform.position, pos.transform.rotation);

            targets.Add(targetObj);

            Target targetSc = targetObj.GetComponent<Target>();
            if (targetSc != null)
                targetSc.SetLife((int)targetLife);
        }
        targetsSpawned = true;
        Debug.Log($"Targets spawned: {targets.Count}");
    }

    public void RemoveFromList(GameObject removeItem)
    {
        targets.Remove(removeItem);
    }
    void Update()
    {
        if (targetsSpawned)
        {
            if (targets.Count == 0)
                allTargetsDestroyed = true;
            if (allTargetsDestroyed)
                MakePlayerClimb();
        }
    }

    public void FinalPlatformReached()
    {
        finalPlatformReached = true;
    }
    void MakePlayerClimb()
    {
        if (player != null)
        {
            CharacterController charController = player.GetComponent<CharacterController>();
            charController.stepOffset = 0.5f;
        }
    }
}
