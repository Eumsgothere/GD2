using UnityEngine;

public class TargetWall : MonoBehaviour
{
    [SerializeField] private Renderer wallRenderer;
    [SerializeField] private Color blueColor = Color.blue;
    [SerializeField] private Color redColor = Color.red;
    [SerializeField] private GameObject slidingWall; // assign in Inspector
    [SerializeField] private float slideDistance = 5f;
    [SerializeField] private float slideSpeed = 2f;

    private Color currentColor;
    private int correctHits = 0;
    private float timer = 0f;
    private float changeInterval = 1f; // change color every second
    private bool isOpening = false;
    private Vector3 initialDoorPos;
    private Vector3 targetDoorPos;

    private void Start()
    {
        if (wallRenderer == null)
            wallRenderer = GetComponent<Renderer>();

        if (slidingWall != null)
            initialDoorPos = slidingWall.transform.position;

        ChangeColor();
    }

    private void Update()
    {
        // Randomly switch color every second
        timer += Time.deltaTime;
        if (timer >= changeInterval)
        {
            timer = 0f;
            ChangeColor();
        }

        // Smoothly slide door upward
        if (isOpening && slidingWall != null)
        {
            slidingWall.transform.position = Vector3.MoveTowards(
                slidingWall.transform.position,
                targetDoorPos,
                slideSpeed * Time.deltaTime
            );
        }
    }

    private void ChangeColor()
    {
        currentColor = (Random.value > 0.5f) ? blueColor : redColor;
        wallRenderer.material.color = currentColor;
    }

    private void OnCollisionEnter(Collision collision)
    {
        // Detect ball collision
        if (!collision.gameObject.CompareTag("RedBall") && !collision.gameObject.CompareTag("BlueBall"))
            return;

        string ballTag = collision.gameObject.tag;

        // Check if the color matches
        if ((currentColor == blueColor && ballTag == "BlueBall") ||
            (currentColor == redColor && ballTag == "RedBall"))
        {
            correctHits++;
            Debug.Log("‚úÖ Correct hit! Count = " + correctHits);

            if (correctHits >= 3)
            {
                OpenSlidingWall();
            }
        }
        else
        {
            Debug.Log("‚ùå Wrong color hit!");
        }

        Destroy(collision.gameObject); // optional: remove ball after hit
    }

    private void OpenSlidingWall()
    {
        if (isOpening || slidingWall == null) return;

        Debug.Log("üö™ Sliding wall opening...");
        targetDoorPos = initialDoorPos + Vector3.up * slideDistance;
        isOpening = true;
    }
}